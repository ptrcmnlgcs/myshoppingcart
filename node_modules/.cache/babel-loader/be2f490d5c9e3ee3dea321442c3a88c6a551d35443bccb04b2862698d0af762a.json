{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  data() {\n    return {\n      items: [{\n        name: 'Item 1',\n        price: 10\n      }, {\n        name: 'Item 2',\n        price: 20\n      }, {\n        name: 'Item 3',\n        price: 15\n      }, {\n        name: 'Item 4',\n        price: 11\n      }, {\n        name: 'Item 5',\n        price: 32\n      }, {\n        name: 'Item 6',\n        price: 23\n      }]\n    };\n  },\n  methods: {\n    addToCart(item) {\n      this.$emit('add-to-cart', item);\n    },\n    updateItem(index) {\n      const item = this.items[index];\n      const newName = prompt('Enter the new name:', item.name);\n      const newPrice = parseFloat(prompt('Enter the new price:', item.price));\n      if (newName && !isNaN(newPrice)) {\n        item.name = newName;\n        item.price = newPrice;\n      }\n    },\n    removeItem(index) {\n      this.items.splice(index, 1);\n    },\n    addItem() {\n      const name = prompt('Enter the name for the new item:');\n      const price = parseFloat(prompt('Enter the price for the new item:'));\n      if (name && !isNaN(price)) {\n        this.items.push({\n          name,\n          price\n        });\n      }\n    }\n  }\n};","map":{"version":3,"names":["data","items","name","price","methods","addToCart","item","$emit","updateItem","index","newName","prompt","newPrice","parseFloat","isNaN","removeItem","splice","addItem","push"],"sources":["C:\\Users\\patre\\itew6\\myshoppingcart\\src\\components\\ProductListing.vue"],"sourcesContent":["<template>\r\n    <div class=\"item-list\">\r\n      <div v-for=\"(item, index) in items\" :key=\"index\" class=\"item\">\r\n        <div class=\"item-details\">\r\n          <p class=\"item-name\">{{ item.name }}</p>\r\n          <p class=\"item-price\">$ {{ item.price }}</p>\r\n        </div>\r\n        <div class=\"button-group\">\r\n          <button @click=\"addToCart(item)\" class=\"add-to-cart-btn\">Add to Cart</button>\r\n          <button @click=\"updateItem(index)\" class=\"update-btn\">Update</button>\r\n          <button @click=\"removeItem(index)\" class=\"remove-btn\">Remove</button>\r\n        </div>\r\n      </div>\r\n      <button @click=\"addItem\" class=\"add-item-btn\">Add New Item</button>\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  export default {\r\n    data() {\r\n      return {\r\n        items: [\r\n          { name: 'Item 1', price: 10 },\r\n          { name: 'Item 2', price: 20 },\r\n          { name: 'Item 3', price: 15 },\r\n          { name: 'Item 4', price: 11 },\r\n          { name: 'Item 5', price: 32 },\r\n          { name: 'Item 6', price: 23 }\r\n        ]\r\n      };\r\n    },\r\n    methods: {\r\n      addToCart(item) {\r\n        this.$emit('add-to-cart', item);\r\n      },\r\n      updateItem(index) {\r\n        const item = this.items[index];\r\n        const newName = prompt('Enter the new name:', item.name);\r\n        const newPrice = parseFloat(prompt('Enter the new price:', item.price));\r\n        \r\n        if (newName && !isNaN(newPrice)) {\r\n          item.name = newName;\r\n          item.price = newPrice;\r\n        }\r\n      },\r\n      removeItem(index) {\r\n        this.items.splice(index, 1);\r\n      },\r\n      addItem() {\r\n        const name = prompt('Enter the name for the new item:');\r\n        const price = parseFloat(prompt('Enter the price for the new item:'));\r\n        \r\n        if (name && !isNaN(price)) {\r\n          this.items.push({ name, price });\r\n        }\r\n      }\r\n    }\r\n  };\r\n  </script>\r\n  \r\n  <style scoped>\r\n  .item-list {\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    margin-top: 20px;\r\n  }\r\n  \r\n  .item {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    padding: 10px;\r\n    border-bottom: 1px solid #ccc;\r\n    width: 80%;\r\n  }\r\n  \r\n  .item-details {\r\n    flex: 1;\r\n  }\r\n  \r\n  .item-name {\r\n    margin: 0;\r\n    font-weight: bold;\r\n  }\r\n  \r\n  .item-price {\r\n    margin: 0;\r\n  }\r\n  \r\n  .button-group {\r\n    display: flex;\r\n    gap: 10px;\r\n  }\r\n  \r\n  .add-to-cart-btn, .update-btn, .remove-btn, .add-item-btn {\r\n    background-color: #4caf50;\r\n    color: white;\r\n    border: none;\r\n    padding: 8px 16px;\r\n    border-radius: 4px;\r\n    cursor: pointer;\r\n    transition: background-color 0.3s;\r\n  }\r\n  \r\n  .add-to-cart-btn:hover, .update-btn:hover, .remove-btn:hover, .add-item-btn:hover {\r\n    background-color: #45a049;\r\n  }\r\n  </style>\r\n  "],"mappings":";AAkBE,eAAe;EACbA,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,KAAK,EAAE,CACL;QAAEC,IAAI,EAAE,QAAQ;QAAEC,KAAK,EAAE;MAAG,CAAC,EAC7B;QAAED,IAAI,EAAE,QAAQ;QAAEC,KAAK,EAAE;MAAG,CAAC,EAC7B;QAAED,IAAI,EAAE,QAAQ;QAAEC,KAAK,EAAE;MAAG,CAAC,EAC7B;QAAED,IAAI,EAAE,QAAQ;QAAEC,KAAK,EAAE;MAAG,CAAC,EAC7B;QAAED,IAAI,EAAE,QAAQ;QAAEC,KAAK,EAAE;MAAG,CAAC,EAC7B;QAAED,IAAI,EAAE,QAAQ;QAAEC,KAAK,EAAE;MAAG;IAEhC,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACPC,SAASA,CAACC,IAAI,EAAE;MACd,IAAI,CAACC,KAAK,CAAC,aAAa,EAAED,IAAI,CAAC;IACjC,CAAC;IACDE,UAAUA,CAACC,KAAK,EAAE;MAChB,MAAMH,IAAG,GAAI,IAAI,CAACL,KAAK,CAACQ,KAAK,CAAC;MAC9B,MAAMC,OAAM,GAAIC,MAAM,CAAC,qBAAqB,EAAEL,IAAI,CAACJ,IAAI,CAAC;MACxD,MAAMU,QAAO,GAAIC,UAAU,CAACF,MAAM,CAAC,sBAAsB,EAAEL,IAAI,CAACH,KAAK,CAAC,CAAC;MAEvE,IAAIO,OAAM,IAAK,CAACI,KAAK,CAACF,QAAQ,CAAC,EAAE;QAC/BN,IAAI,CAACJ,IAAG,GAAIQ,OAAO;QACnBJ,IAAI,CAACH,KAAI,GAAIS,QAAQ;MACvB;IACF,CAAC;IACDG,UAAUA,CAACN,KAAK,EAAE;MAChB,IAAI,CAACR,KAAK,CAACe,MAAM,CAACP,KAAK,EAAE,CAAC,CAAC;IAC7B,CAAC;IACDQ,OAAOA,CAAA,EAAG;MACR,MAAMf,IAAG,GAAIS,MAAM,CAAC,kCAAkC,CAAC;MACvD,MAAMR,KAAI,GAAIU,UAAU,CAACF,MAAM,CAAC,mCAAmC,CAAC,CAAC;MAErE,IAAIT,IAAG,IAAK,CAACY,KAAK,CAACX,KAAK,CAAC,EAAE;QACzB,IAAI,CAACF,KAAK,CAACiB,IAAI,CAAC;UAAEhB,IAAI;UAAEC;QAAM,CAAC,CAAC;MAClC;IACF;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}