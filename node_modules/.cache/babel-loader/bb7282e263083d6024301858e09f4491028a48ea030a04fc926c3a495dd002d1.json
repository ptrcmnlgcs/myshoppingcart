{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, vModelText as _vModelText, withKeys as _withKeys, withDirectives as _withDirectives, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-ee9c2650\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"cart\"\n};\nconst _hoisted_2 = {\n  class: \"item-details\"\n};\nconst _hoisted_3 = {\n  class: \"item-name\"\n};\nconst _hoisted_4 = {\n  class: \"item-price\"\n};\nconst _hoisted_5 = {\n  class: \"item-quantity\"\n};\nconst _hoisted_6 = {\n  class: \"quantity-controls\"\n};\nconst _hoisted_7 = [\"onClick\"];\nconst _hoisted_8 = [\"onClick\"];\nconst _hoisted_9 = {\n  class: \"total\"\n};\nconst _hoisted_10 = {\n  key: 0,\n  class: \"dialog\"\n};\nconst _hoisted_11 = {\n  class: \"dialog-content\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createCommentVNode(\" Cart items \"), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($props.cart, (item, index) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: index,\n      class: \"cart-item\"\n    }, [_createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"p\", _hoisted_3, _toDisplayString(item.name), 1 /* TEXT */), _createElementVNode(\"p\", _hoisted_4, \"$ \" + _toDisplayString(item.price), 1 /* TEXT */), _createElementVNode(\"p\", _hoisted_5, \"Quantity: \" + _toDisplayString(item.quantity), 1 /* TEXT */)]), _createElementVNode(\"div\", _hoisted_6, [_createElementVNode(\"button\", {\n      onClick: $event => $options.openDialog(index)\n    }, \"Update\", 8 /* PROPS */, _hoisted_7), _createElementVNode(\"button\", {\n      onClick: $event => $options.removeFromCart(index)\n    }, \"Remove\", 8 /* PROPS */, _hoisted_8)])]);\n  }), 128 /* KEYED_FRAGMENT */)), _createCommentVNode(\" Total \"), _createElementVNode(\"p\", _hoisted_9, \"Total: $ \" + _toDisplayString($options.total), 1 /* TEXT */), _createCommentVNode(\" Dialog for updating quantity \"), $data.dialogVisible ? (_openBlock(), _createElementBlock(\"div\", _hoisted_10, [_createElementVNode(\"div\", _hoisted_11, [_createElementVNode(\"p\", null, \"Enter new quantity for \" + _toDisplayString($props.cart[$data.selectedItemIndex].name) + \":\", 1 /* TEXT */), _withDirectives(_createElementVNode(\"input\", {\n    type: \"number\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.newQuantity = $event),\n    onKeydown: _cache[1] || (_cache[1] = _withKeys($event => $options.updateQuantity($data.selectedItemIndex), [\"enter\"]))\n  }, null, 544 /* NEED_HYDRATION, NEED_PATCH */), [[_vModelText, $data.newQuantity]]), _createElementVNode(\"button\", {\n    onClick: _cache[2] || (_cache[2] = $event => $options.updateQuantity($data.selectedItemIndex))\n  }, \"Save\"), _createElementVNode(\"button\", {\n    onClick: _cache[3] || (_cache[3] = (...args) => $options.closeDialog && $options.closeDialog(...args))\n  }, \"Cancel\")])])) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_hoisted_1","_createCommentVNode","_Fragment","_renderList","$props","cart","item","index","_createElementVNode","_hoisted_2","_hoisted_3","_toDisplayString","name","_hoisted_4","price","_hoisted_5","quantity","_hoisted_6","onClick","$event","$options","openDialog","_hoisted_7","removeFromCart","_hoisted_8","_hoisted_9","total","$data","dialogVisible","_hoisted_10","_hoisted_11","selectedItemIndex","type","_cache","newQuantity","onKeydown","_withKeys","updateQuantity","args","closeDialog"],"sources":["C:\\Users\\patre\\itew6\\myshoppingcart\\src\\components\\ShoppingCart.vue"],"sourcesContent":["<template>\r\n    <div class=\"cart\">\r\n      <!-- Cart items -->\r\n      <div v-for=\"(item, index) in cart\" :key=\"index\" class=\"cart-item\">\r\n        <div class=\"item-details\">\r\n          <p class=\"item-name\">{{ item.name }}</p>\r\n          <p class=\"item-price\">$ {{ item.price }}</p>\r\n          <p class=\"item-quantity\">Quantity: {{ item.quantity }}</p>\r\n        </div>\r\n        <div class=\"quantity-controls\">\r\n          <button @click=\"openDialog(index)\">Update</button>\r\n          <button @click=\"removeFromCart(index)\">Remove</button>\r\n        </div>\r\n      </div>\r\n  \r\n      <!-- Total -->\r\n      <p class=\"total\">Total: $ {{ total }}</p>\r\n  \r\n      <!-- Dialog for updating quantity -->\r\n      <div v-if=\"dialogVisible\" class=\"dialog\">\r\n        <div class=\"dialog-content\">\r\n          <p>Enter new quantity for {{ cart[selectedItemIndex].name }}:</p>\r\n          <input type=\"number\" v-model=\"newQuantity\" @keydown.enter=\"updateQuantity(selectedItemIndex)\">\r\n          <button @click=\"updateQuantity(selectedItemIndex)\">Save</button>\r\n          <button @click=\"closeDialog\">Cancel</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  export default {\r\n    data() {\r\n      return {\r\n        dialogVisible: false,\r\n        selectedItemIndex: null,\r\n        newQuantity: '', // Use newQuantity to bind the input value\r\n      };\r\n    },\r\n    props: {\r\n      cart: {\r\n        type: Array,\r\n        default: () => [],\r\n      },\r\n    },\r\n    computed: {\r\n      total() {\r\n        if (this.cart.length === 0) {\r\n          return 0; // Return 0 if the cart is empty\r\n        }\r\n        return this.cart.reduce((acc, item) => acc + item.price * item.quantity, 0);\r\n      },\r\n    },\r\n    methods: {\r\n      openDialog(index) {\r\n        this.selectedItemIndex = index;\r\n        // Initialize newQuantity to the quantity of the selected item\r\n        this.newQuantity = this.cart[index].quantity.toString(); // Set as string to handle empty input\r\n        this.dialogVisible = true;\r\n      },\r\n      closeDialog() {\r\n        this.dialogVisible = false;\r\n      },\r\n      updateQuantity(index) {\r\n        // Parse the input value as an integer directly within the input handler\r\n        const newQuantity = parseInt(this.newQuantity);\r\n  \r\n        // Check if the parsed value is a valid integer and non-negative\r\n        if (!isNaN(newQuantity) && newQuantity >= 0) {\r\n          // Emit an event to notify the parent component about the quantity update\r\n          this.$emit('update-quantity', { index, quantity: newQuantity });\r\n          // Close the dialog\r\n          this.closeDialog();\r\n        } else {\r\n          // Show an alert if the input is not valid\r\n          alert('Please enter a valid non-negative integer!');\r\n        }\r\n      },\r\n      removeFromCart(index) {\r\n        this.$emit('remove-from-cart', index);\r\n      },\r\n    },\r\n  };\r\n  </script>\r\n  \r\n  <style scoped>\r\n  .cart {\r\n    margin-top: 20px;\r\n  }\r\n  \r\n  .cart-item {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    padding: 10px;\r\n    border-bottom: 1px solid #ccc;\r\n  }\r\n  \r\n  .item-details {\r\n    flex: 1;\r\n  }\r\n  \r\n  .item-name {\r\n    margin: 0;\r\n    font-weight: bold;\r\n  }\r\n  \r\n  .item-quantity {\r\n    margin: 0;\r\n  }\r\n  \r\n  .item-price {\r\n    margin: 0;\r\n  }\r\n  \r\n  .quantity-controls {\r\n    display: flex;\r\n    align-items: center;\r\n  }\r\n  \r\n  button {\r\n    margin-left: 10px;\r\n  }\r\n  \r\n  .total {\r\n    font-size: 18px;\r\n    font-weight: bold;\r\n    margin-top: 10px;\r\n  }\r\n  \r\n  .dialog {\r\n    position: fixed;\r\n    top: 0;\r\n    left: 0;\r\n    width: 100%;\r\n    height: 100%;\r\n    background-color: rgba(0, 0, 0, 0.5);\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n  }\r\n  \r\n  .dialog-content {\r\n    background-color: white;\r\n    padding: 20px;\r\n    border-radius: 5px;\r\n  }\r\n  \r\n  .dialog-content input {\r\n    width: 100px;\r\n  }\r\n  </style>\r\n"],"mappings":";;;EACSA,KAAK,EAAC;AAAM;;EAGRA,KAAK,EAAC;AAAc;;EACpBA,KAAK,EAAC;AAAW;;EACjBA,KAAK,EAAC;AAAY;;EAClBA,KAAK,EAAC;AAAe;;EAErBA,KAAK,EAAC;AAAmB;mBATtC;mBAAA;;EAgBSA,KAAK,EAAC;AAAO;;EAhBtBC,GAAA;EAmBgCD,KAAK,EAAC;;;EACzBA,KAAK,EAAC;AAAgB;;uBAnB/BE,mBAAA,CA0BM,OA1BNC,UA0BM,GAzBJC,mBAAA,gBAAmB,G,kBACnBF,mBAAA,CAUMG,SAAA,QAbZC,WAAA,CAGmCC,MAAA,CAAAC,IAAI,EAHvC,CAGmBC,IAAI,EAAEC,KAAK;yBAAxBR,mBAAA,CAUM;MAV8BD,GAAG,EAAES,KAAK;MAAEV,KAAK,EAAC;QACpDW,mBAAA,CAIM,OAJNC,UAIM,GAHJD,mBAAA,CAAwC,KAAxCE,UAAwC,EAAAC,gBAAA,CAAhBL,IAAI,CAACM,IAAI,kBACjCJ,mBAAA,CAA4C,KAA5CK,UAA4C,EAAtB,IAAE,GAAAF,gBAAA,CAAGL,IAAI,CAACQ,KAAK,kBACrCN,mBAAA,CAA0D,KAA1DO,UAA0D,EAAjC,YAAU,GAAAJ,gBAAA,CAAGL,IAAI,CAACU,QAAQ,iB,GAErDR,mBAAA,CAGM,OAHNS,UAGM,GAFJT,mBAAA,CAAkD;MAAzCU,OAAK,EAAAC,MAAA,IAAEC,QAAA,CAAAC,UAAU,CAACd,KAAK;OAAG,QAAM,iBAVnDe,UAAA,GAWUd,mBAAA,CAAsD;MAA7CU,OAAK,EAAAC,MAAA,IAAEC,QAAA,CAAAG,cAAc,CAAChB,KAAK;OAAG,QAAM,iBAXvDiB,UAAA,E;kCAeMvB,mBAAA,WAAc,EACdO,mBAAA,CAAyC,KAAzCiB,UAAyC,EAAxB,WAAS,GAAAd,gBAAA,CAAGS,QAAA,CAAAM,KAAK,kBAElCzB,mBAAA,kCAAqC,EAC1B0B,KAAA,CAAAC,aAAa,I,cAAxB7B,mBAAA,CAOM,OAPN8B,WAOM,GANJrB,mBAAA,CAKM,OALNsB,WAKM,GAJJtB,mBAAA,CAAiE,WAA9D,yBAAuB,GAAAG,gBAAA,CAAGP,MAAA,CAAAC,IAAI,CAACsB,KAAA,CAAAI,iBAAiB,EAAEnB,IAAI,IAAG,GAAC,iB,gBAC7DJ,mBAAA,CAA8F;IAAvFwB,IAAI,EAAC,QAAQ;IAtB9B,uBAAAC,MAAA,QAAAA,MAAA,MAAAd,MAAA,IAsBwCQ,KAAA,CAAAO,WAAW,GAAAf,MAAA;IAAGgB,SAAO,EAAAF,MAAA,QAAAA,MAAA,MAtB7DG,SAAA,CAAAjB,MAAA,IAsBqEC,QAAA,CAAAiB,cAAc,CAACV,KAAA,CAAAI,iBAAiB;iEAA7DJ,KAAA,CAAAO,WAAW,E,GACzC1B,mBAAA,CAAgE;IAAvDU,OAAK,EAAAe,MAAA,QAAAA,MAAA,MAAAd,MAAA,IAAEC,QAAA,CAAAiB,cAAc,CAACV,KAAA,CAAAI,iBAAiB;KAAG,MAAI,GACvDvB,mBAAA,CAA4C;IAAnCU,OAAK,EAAAe,MAAA,QAAAA,MAAA,UAAAK,IAAA,KAAElB,QAAA,CAAAmB,WAAA,IAAAnB,QAAA,CAAAmB,WAAA,IAAAD,IAAA,CAAW;KAAE,QAAM,E,OAxB7CrC,mBAAA,e","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}