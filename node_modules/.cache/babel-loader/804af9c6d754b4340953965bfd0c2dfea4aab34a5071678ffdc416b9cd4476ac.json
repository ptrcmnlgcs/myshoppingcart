{"ast":null,"code":"export default {\n  data() {\n    return {\n      dialogVisible: false,\n      selectedItemIndex: null,\n      newQuantity: '' // Use newQuantity to bind the input value\n    };\n  },\n  props: {\n    cart: {\n      type: Array,\n      default: () => []\n    }\n  },\n  computed: {\n    total() {\n      if (this.cart.length === 0) {\n        return 0; // Return 0 if the cart is empty\n      }\n      return this.cart.reduce((acc, item) => acc + item.price * item.quantity, 0);\n    }\n  },\n  methods: {\n    openDialog(index) {\n      this.selectedItemIndex = index;\n      // Initialize newQuantity to the quantity of the selected item\n      this.newQuantity = this.cart[index].quantity.toString(); // Set as string to handle empty input\n      this.dialogVisible = true;\n    },\n    closeDialog() {\n      this.dialogVisible = false;\n    },\n    updateQuantity(index) {\n      // Parse the input value as an integer directly within the input handler\n      const newQuantity = parseInt(this.newQuantity);\n\n      // Check if the parsed value is a valid integer and non-negative\n      if (!isNaN(newQuantity) && newQuantity >= 0) {\n        // Emit an event to notify the parent component about the quantity update\n        this.$emit('update-quantity', {\n          index,\n          quantity: newQuantity\n        });\n        // Close the dialog\n        this.closeDialog();\n      } else {\n        // Show an alert if the input is not valid\n        alert('Please enter a valid non-negative integer!');\n      }\n    },\n    removeFromCart(index) {\n      this.$emit('remove-from-cart', index);\n    }\n  }\n};","map":{"version":3,"names":["data","dialogVisible","selectedItemIndex","newQuantity","props","cart","type","Array","default","computed","total","length","reduce","acc","item","price","quantity","methods","openDialog","index","toString","closeDialog","updateQuantity","parseInt","isNaN","$emit","alert","removeFromCart"],"sources":["C:\\Users\\patre\\itew6\\myshoppingcart\\src\\components\\ShoppingCart.vue"],"sourcesContent":["<template>\r\n    <div class=\"cart\">\r\n      <!-- Cart items -->\r\n      <div v-for=\"(item, index) in cart\" :key=\"index\" class=\"cart-item\">\r\n        <div class=\"item-details\">\r\n          <p class=\"item-name\">{{ item.name }}</p>\r\n          <p class=\"item-price\">$ {{ item.price }}</p>\r\n          <p class=\"item-quantity\">Quantity: {{ item.quantity }}</p>\r\n        </div>\r\n        <div class=\"quantity-controls\">\r\n          <button @click=\"openDialog(index)\">Update</button>\r\n          <button @click=\"removeFromCart(index)\">Remove</button>\r\n        </div>\r\n      </div>\r\n  \r\n      <!-- Total -->\r\n      <p class=\"total\">Total: $ {{ total }}</p>\r\n  \r\n      <!-- Dialog for updating quantity -->\r\n      <div v-if=\"dialogVisible\" class=\"dialog\">\r\n        <div class=\"dialog-content\">\r\n          <p>Enter new quantity for {{ cart[selectedItemIndex].name }}:</p>\r\n          <input type=\"number\" v-model=\"newQuantity\" @keydown.enter=\"updateQuantity(selectedItemIndex)\">\r\n          <button @click=\"updateQuantity(selectedItemIndex)\">Save</button>\r\n          <button @click=\"closeDialog\">Cancel</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  export default {\r\n    data() {\r\n      return {\r\n        dialogVisible: false,\r\n        selectedItemIndex: null,\r\n        newQuantity: '', // Use newQuantity to bind the input value\r\n      };\r\n    },\r\n    props: {\r\n      cart: {\r\n        type: Array,\r\n        default: () => [],\r\n      },\r\n    },\r\n    computed: {\r\n      total() {\r\n        if (this.cart.length === 0) {\r\n          return 0; // Return 0 if the cart is empty\r\n        }\r\n        return this.cart.reduce((acc, item) => acc + item.price * item.quantity, 0);\r\n      },\r\n    },\r\n    methods: {\r\n      openDialog(index) {\r\n        this.selectedItemIndex = index;\r\n        // Initialize newQuantity to the quantity of the selected item\r\n        this.newQuantity = this.cart[index].quantity.toString(); // Set as string to handle empty input\r\n        this.dialogVisible = true;\r\n      },\r\n      closeDialog() {\r\n        this.dialogVisible = false;\r\n      },\r\n      updateQuantity(index) {\r\n        // Parse the input value as an integer directly within the input handler\r\n        const newQuantity = parseInt(this.newQuantity);\r\n  \r\n        // Check if the parsed value is a valid integer and non-negative\r\n        if (!isNaN(newQuantity) && newQuantity >= 0) {\r\n          // Emit an event to notify the parent component about the quantity update\r\n          this.$emit('update-quantity', { index, quantity: newQuantity });\r\n          // Close the dialog\r\n          this.closeDialog();\r\n        } else {\r\n          // Show an alert if the input is not valid\r\n          alert('Please enter a valid non-negative integer!');\r\n        }\r\n      },\r\n      removeFromCart(index) {\r\n        this.$emit('remove-from-cart', index);\r\n      },\r\n    },\r\n  };\r\n  </script>\r\n  \r\n  <style scoped>\r\n  .cart {\r\n    margin-top: 20px;\r\n  }\r\n  \r\n  .cart-item {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    padding: 10px;\r\n    border-bottom: 1px solid #ccc;\r\n  }\r\n  \r\n  .item-details {\r\n    flex: 1;\r\n  }\r\n  \r\n  .item-name {\r\n    margin: 0;\r\n    font-weight: bold;\r\n  }\r\n  \r\n  .item-quantity {\r\n    margin: 0;\r\n  }\r\n  \r\n  .item-price {\r\n    margin: 0;\r\n  }\r\n  \r\n  .quantity-controls {\r\n    display: flex;\r\n    align-items: center;\r\n  }\r\n  \r\n  button {\r\n    margin-left: 10px;\r\n  }\r\n  \r\n  .total {\r\n    font-size: 18px;\r\n    font-weight: bold;\r\n    margin-top: 10px;\r\n  }\r\n  \r\n  .dialog {\r\n    position: fixed;\r\n    top: 0;\r\n    left: 0;\r\n    width: 100%;\r\n    height: 100%;\r\n    background-color: rgba(0, 0, 0, 0.5);\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n  }\r\n  \r\n  .dialog-content {\r\n    background-color: white;\r\n    padding: 20px;\r\n    border-radius: 5px;\r\n  }\r\n  \r\n  .dialog-content input {\r\n    width: 100px;\r\n  }\r\n  </style>\r\n"],"mappings":"AA+BE,eAAe;EACbA,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,aAAa,EAAE,KAAK;MACpBC,iBAAiB,EAAE,IAAI;MACvBC,WAAW,EAAE,EAAE,CAAE;IACnB,CAAC;EACH,CAAC;EACDC,KAAK,EAAE;IACLC,IAAI,EAAE;MACJC,IAAI,EAAEC,KAAK;MACXC,OAAO,EAAEA,CAAA,KAAM;IACjB;EACF,CAAC;EACDC,QAAQ,EAAE;IACRC,KAAKA,CAAA,EAAG;MACN,IAAI,IAAI,CAACL,IAAI,CAACM,MAAK,KAAM,CAAC,EAAE;QAC1B,OAAO,CAAC,EAAE;MACZ;MACA,OAAO,IAAI,CAACN,IAAI,CAACO,MAAM,CAAC,CAACC,GAAG,EAAEC,IAAI,KAAKD,GAAE,GAAIC,IAAI,CAACC,KAAI,GAAID,IAAI,CAACE,QAAQ,EAAE,CAAC,CAAC;IAC7E;EACF,CAAC;EACDC,OAAO,EAAE;IACPC,UAAUA,CAACC,KAAK,EAAE;MAChB,IAAI,CAACjB,iBAAgB,GAAIiB,KAAK;MAC9B;MACA,IAAI,CAAChB,WAAU,GAAI,IAAI,CAACE,IAAI,CAACc,KAAK,CAAC,CAACH,QAAQ,CAACI,QAAQ,CAAC,CAAC,EAAE;MACzD,IAAI,CAACnB,aAAY,GAAI,IAAI;IAC3B,CAAC;IACDoB,WAAWA,CAAA,EAAG;MACZ,IAAI,CAACpB,aAAY,GAAI,KAAK;IAC5B,CAAC;IACDqB,cAAcA,CAACH,KAAK,EAAE;MACpB;MACA,MAAMhB,WAAU,GAAIoB,QAAQ,CAAC,IAAI,CAACpB,WAAW,CAAC;;MAE9C;MACA,IAAI,CAACqB,KAAK,CAACrB,WAAW,KAAKA,WAAU,IAAK,CAAC,EAAE;QAC3C;QACA,IAAI,CAACsB,KAAK,CAAC,iBAAiB,EAAE;UAAEN,KAAK;UAAEH,QAAQ,EAAEb;QAAY,CAAC,CAAC;QAC/D;QACA,IAAI,CAACkB,WAAW,CAAC,CAAC;MACpB,OAAO;QACL;QACAK,KAAK,CAAC,4CAA4C,CAAC;MACrD;IACF,CAAC;IACDC,cAAcA,CAACR,KAAK,EAAE;MACpB,IAAI,CAACM,KAAK,CAAC,kBAAkB,EAAEN,KAAK,CAAC;IACvC;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}